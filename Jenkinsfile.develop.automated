def MAIL_TO = "webops@visitscotland.net"

def thisAgent
def VS_CONTAINER_BASE_PORT_OVERRIDE
cron_string = ""
if (BRANCH_NAME == "develop" && (JOB_NAME == "develop.visitscotland.com/develop" || JOB_NAME == "develop.visitscotland.com-mb/develop")) {
  thisAgent = "op-dev-xvcdocker-01"
  env.VS_CONTAINER_BASE_PORT_OVERRIDE = "8099"
  env.VS_RELEASE_SNAPSHOT = "FALSE"
} else if (BRANCH_NAME == "develop" && (JOB_NAME == "develop-nightly.visitscotland.com/develop" || JOB_NAME == "develop-nightly.visitscotland.com-mb/develop")) {
  thisAgent = "op-dev-xvcdocker-01"
  env.VS_CONTAINER_BASE_PORT_OVERRIDE = "8098"
  cron_string = "@midnight"
} else if (BRANCH_NAME == "develop" && (JOB_NAME == "develop-stable.visitscotland.com/develop" || JOB_NAME == "develop-stable.visitscotland.com-mb/develop")) {
  thisAgent = "op-dev-xvcdocker-01"
  env.VS_CONTAINER_BASE_PORT_OVERRIDE = "8100"
} else if (BRANCH_NAME == "develop" && (JOB_NAME == "feature.visitscotland.com/develop" || JOB_NAME == "feature.visitscotland.com-mb/develop")) {
  thisAgent = "op-dev-xvcdocker-01"
  env.VS_CONTAINER_BASE_PORT_OVERRIDE = "8097"
} else if (BRANCH_NAME == "feature/VS-1865-feature-environments-enhancements" && (JOB_NAME == "feature.visitscotland.com-mb/feature%2FVS-1865-feature-environments-enhancements")) {
  thisAgent = "op-dev-xvcdocker-01"
  //env.VS_CONTAINER_BASE_PORT_OVERRIDE = "8096"
  //cron_string = "*/2 * * * *"
} else {
  env.VS_RELEASE_SNAPSHOT = "FALSE"
  // thisAgent should always be set to op-dev-xvcdocker-01 unless you have been informed otherwise!
  thisAgent = "op-dev-xvcdocker-01"
  //thisAgent = "docker-02"
}

import groovy.json.JsonSlurper

pipeline {
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    // to-do
    // gp: investigate milestone caclulation to cancel current build if a new one starts
    // - see: https://stackoverflow.com/questions/40760716/jenkins-abort-running-build-if-new-one-is-started/44326216
    // - see: https://www.jenkins.io/doc/pipeline/steps/pipeline-milestone-step/#pipeline-milestone-step
    // gp: investigate the use of stash/unstash to make build artefacts available to other nodes
    // - see: https://www.cloudbees.com/blog/parallelism-and-distributed-builds-jenkins
    // - this could potentially allow the running of all Lighthouse tests on a separate node
    // - experiment with a simple echo on a different node (stash/unstash)
    // gp: change sonarqube project target to a short version of the project name

    disableConcurrentBuilds()
  }
  agent {label thisAgent}
  triggers { cron( cron_string ) }
  environment {
    MAVEN_SETTINGS = credentials('maven-settings')
    // from 20200804 VS_SSR_PROXY_ON will only affect whether the SSR app is packaged and sent to the container, using or bypassing will be set via query string
    VS_SSR_PROXY_ON = 'TRUE'
    // VS_CONTAINER_PRESERVE is set to TRUE in the ingrastructure build script, if this is set to FALSE the container will be rebuilt every time and the repository wiped
    VS_CONTAINER_PRESERVE = 'TRUE'
    // VS_BRXM_PERSISTENCE_METHOD can be set to either 'h2' or 'mysql' - do not change during the lifetime of a container or it will break the repo
    VS_BRXM_PERSISTENCE_METHOD = 'h2'
    // VS_SKIP_BUILD_FOR_BRANCH is useful for testing, only ever set to your working branch name - never to a variable!
    VS_SKIP_BUILD_FOR_BRANCH = 'feature/VS-1865-feature-environments-enhancements-log4j'
    // VS_COMMIT_AUTHOR is required by later stages which will fail if it's not set, default value of jenkins@visitscotland.net
    // turns out if you set it here it will not be overwritten by the load later in the pipeline
    //VS_COMMIT_AUTHOR = 'jenkins@visitscotland.net'
    VS_RUN_BRC_STAGES = 'FALSE'
    // -- 20200712: TEST and PACKAGE stages might need VS_SKIP set to TRUE as they just run the ~4 minute front-end build every time
    VS_SKIP_BRC_BLD = 'FALSE'
    VS_SKIP_BRC_TST = 'FALSE'
    VS_SKIP_BRC_PKG = 'FALSE'
    VS_SKIP_BRC_CXN = 'FALSE'
    VS_SKIP_BRC_UPL = 'FALSE'
    VS_BRC_STACK_URI = 'visitscotland'
    VS_BRC_ENV = 'demo'
    VS_BRC_STACK_URL = "https://api-${VS_BRC_STACK_URI}.onehippo.io"
    VS_BRC_STACK_API_VERSION = 'v3'
    VS_DOCKER_IMAGE_NAME = 'vs/vs-brxm15:node16'
  }

  tools {
    maven 'Maven 3.5.4'
    jdk 'jdk11'
  }

  stages {

    stage ('Pre-build') {

      steps {
        // Set any defined build property overrides for this work-in-progress branch
        script {

          // Set any supported build property overrides defined in ci/BRANCH_NAME.buildprops
          branchBuildScripts = load("./ci/branchBuildScripts.groovy")

          // Set the buildprop environment variables either to their default values or any specified overrides
          Map buildProps = branchBuildScripts.loadPropOverrides("${env.WORKSPACE}" + "/ci/", branchBuildScripts.getBranchKey())
          Map buildPropParsers = branchBuildScripts.getPropParsers()
          buildPropParsers.each {
            k, v ->
              String parsedValue = ( buildProps?.containsKey(k) ? v.parser(buildProps[k]) : v.default )
              env."${k}" = parsedValue
          }
        }

        sh 'printenv'
      }
    }

    stage ('automation build') {
      when {
        changeset "feature/release-automation-jenkins-develop"
      }
      steps {
        echo - e "  Branch: ${BRANCH_NAME}\nJob Name: ${JOB_NAME}\n   Stage: ${BUILD_DISPLAY_NAME}"
        echo "  Branch: ${BRANCH_NAME}"
        echo "Job Name: ${JOB_NAME}"
        echo "   Stage: ${BUILD_DISPLAY_NAME}"
      }
      post {
        success {
          echo "Automation succeeded on branch: ${BRANCH_NAME}"
          failure {
            echo "Automation failed on branch: ${BRANCH_NAME}"
          }
        }
      }
    }
} //end pipeline

// function to read in a properties file (see https://medium.com/@dhamodharakkannan/jenkins-loading-variables-from-a-file-for-different-environments-d442a2a48bce)
// may not be required if simple "load" command works
def readEnvironmentVariables(path){
  def properties = readProperties file: path
  keys= properties.keySet()
  for(key in keys) {
    value = properties["${key}"]
    env."${key}" = "${value}"
  }
}
